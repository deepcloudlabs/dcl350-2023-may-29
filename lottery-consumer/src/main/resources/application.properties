server.port=8800
server.address=localhost

server.servlet.context-path=/consumer
spring.mvc.servlet.path=/api/v1

spring.application.name=lottery-consumer
clientSideLB=custom

eureka.client.service-url.defaultZone=http://localhost:9600/eureka
eureka.instance.lease-expiration-duration-in-seconds=1
eureka.instance.lease-renewal-interval-in-seconds=2
eureka.instance.hostname=localhost

# retry
resilience4j.retry.instances.lotteryRetry.max-attempts=5
resilience4j.retry.instances.lotteryRetry.wait-duration=1s
resilience4j.retry.instances.lotteryRetry.retry-exceptions=java.lang.Throwable
resilience4j.retry.instances.lotteryRetry.enable-exponential-backoff=true
resilience4j.retry.instances.lotteryRetry.exponential-backoff-multiplier=2

# rate-limiter
resilience4j.ratelimiter.instances.lotteryRateLimiter.limit-for-period=1
resilience4j.ratelimiter.instances.lotteryRateLimiter.limit-refresh-period=5s
resilience4j.ratelimiter.instances.lotteryRateLimiter.event-consumer-buffer-size=1

# time-limiter
resilience4j.timelimiter.instances.lotteryTimeLimiter.timeout-duration=1s

#circuit-breaker
# closed state --> open state
resilience4j.circuitbreaker.instances.lotteryCircuitBreaker.failure-rate-threshold=20
# open state -- after 3 seconds -> half-open state 
resilience4j.circuitbreaker.instances.lotteryCircuitBreaker.wait-duration-in-open-state=3s
# half-open state --> open state 
resilience4j.circuitbreaker.instances.lotteryCircuitBreaker.max-wait-duration-in-half-open-state=5s
# half-open state --> closed state 
resilience4j.circuitbreaker.instances.lotteryCircuitBreaker.permitted-number-of-calls-in-half-open-state=10
resilience4j.circuitbreaker.instances.lotteryCircuitBreaker.minimum-number-of-calls=8